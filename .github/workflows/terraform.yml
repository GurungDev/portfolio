name: Terraform CI/CD

## Github Actions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Plan, Apply, and Destroy
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: "google-github-actions/auth@v2"
        with:
          project_id: "concepts-demo"
          credentials_json: ${{ secrets.NG_SA_KEY_GCLOUD }}

      # Configure Docker to Authenticate with GCR
      - name: Configure Docker to Authenticate with GCR
        run: gcloud auth configure-docker

    # Set the Google Cloud project, region, and cluster dynamically from the service account credentials
      - name: Get Google Cloud Project ID, Region, and Cluster
        id: gcp-info
        run: |
          # Get the current project ID
          PROJECT_ID=$(gcloud config get-value project)
          
          # Get the region and cluster name from GKE (replace with your cluster names/regions if needed)
          GKE_CLUSTER_NAME=$(gcloud container clusters list --format="value(name)" --limit 1)
          GKE_REGION=$(gcloud container clusters describe ${GKE_CLUSTER_NAME} --format="value(location)")

          # Output the values
          echo "GCP_PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV
          echo "GKE_CLUSTER_NAME=${GKE_CLUSTER_NAME}" >> $GITHUB_ENV
          echo "GKE_REGION=${GKE_REGION}" >> $GITHUB_ENV

      # Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t portfolio-nextjs:latest .
          docker tag portfolio-nextjs:latest gcr.io/${{ env.GCP_PROJECT_ID }}/portfolio-nextjs:latest
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/portfolio-nextjs:latest

      # Set up GKE kubeconfig dynamically
      - name: Set up GKE kubeconfig
        run: |
          gcloud container clusters get-credentials ${{env.GKE_CLUSTER_NAME}} --region ${{env.GKE_REGION}} --project ${{env.GCP_PROJECT_ID}}

      # Set KUBECONFIG environment variable so Terraform can access the kubeconfig
      - name: Set KUBECONFIG environment variable
        run: echo "KUBECONFIG=${HOME}/.kube/config" >> $GITHUB_ENV

      # Verify kubectl access to the cluster
      - name: Verify kubectl access to the cluster
        run: |
          kubectl config current-context
          kubectl get nodes

      # Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      # Terraform init
      - name: Initialize Terraform
        run: terraform init

      # Terraform plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Terraform apply (Only on push events to main)
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      # Extract Argo CD admin password
      - name: Get Argo CD Admin Password
        id: argocd_password
        run: |
          export PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
          echo "ARGOCD_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      # Sync Argo CD Application
      - name: Sync Argo CD Application
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          sleep 5
          argocd login localhost:8080 --username admin --password $ARGOCD_PASSWORD --insecure
          argocd app sync portfolio-nextjs

      # Wait for 1 minute
      - name: Wait for 20 minute
        run: sleep 1000

      # Terraform destroy
      - name: Terraform Destroy
        if: github.event_name == 'push'
        run: terraform destroy -auto-approve
